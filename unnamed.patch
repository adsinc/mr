Index: tools/src/main/scala/ru/kryptonite/audio/tools/processing/commands/commands.scala
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/tools/src/main/scala/ru/kryptonite/audio/tools/processing/commands/commands.scala b/tools/src/main/scala/ru/kryptonite/audio/tools/processing/commands/commands.scala
--- a/tools/src/main/scala/ru/kryptonite/audio/tools/processing/commands/commands.scala	(revision e48ecbff4b0f6247ce4f11276c6b904f83b7738f)
+++ b/tools/src/main/scala/ru/kryptonite/audio/tools/processing/commands/commands.scala	(date 1697700008100)
@@ -9,7 +9,7 @@
 object Vad {
   case object Filter extends Vad
 
-  case object Chunk extends Vad
+  case object Chunks extends Vad
 }
 
 case object Empty extends Command
Index: tools/src/main/scala/ru/kryptonite/audio/tools/processing/commands/VadChunking.scala
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/tools/src/main/scala/ru/kryptonite/audio/tools/processing/commands/VadChunking.scala b/tools/src/main/scala/ru/kryptonite/audio/tools/processing/commands/VadChunking.scala
new file mode 100644
--- /dev/null	(date 1697700008100)
+++ b/tools/src/main/scala/ru/kryptonite/audio/tools/processing/commands/VadChunking.scala	(date 1697700008100)
@@ -0,0 +1,76 @@
+package ru.kryptonite.audio.tools.processing.commands
+
+import org.apache.commons.io.IOUtils
+import ru.kryptonite.audio.fvad.process.FVadProcessor
+import ru.kryptonite.audio.tools.processing.AudioConverter
+import ru.kryptonite.audio.tools.processing.AudioConverter.withCloseable
+import ru.kryptonite.commons.binary.{ Binary, Reader, Writer }
+
+import java.io.{ ByteArrayInputStream, File, FileInputStream, FileOutputStream }
+import javax.sound.sampled.AudioSystem
+import scala.collection.mutable
+import scala.util.{ Failure, Try }
+
+case class VadChunking(in: File, out: File, mode: Int, frameDuration: Int) {
+
+  def chunks(): Unit =
+    withCloseable(new FileInputStream(in)) { is =>
+      val bytes  = IOUtils.toByteArray(is)
+      val binary = Binary.owned(bytes)
+
+      val bis    = new ByteArrayInputStream(bytes)
+      val ais    = AudioSystem.getAudioInputStream(bis)
+      val format = ais.getFormat
+
+      var channelInd, fileNum = 0
+      val vadProcessor        = FVadProcessor(AudioConverter.DefaultFrequency.toInt, mode, frameDuration)
+
+      val (fileName, extension) = out.getName.split("\\.") match {
+        case Array(name, "wav") => (name, ".wav")
+        case _                  => throw new IllegalArgumentException(s"Unsupported file name. Expected: <file_name>.wav")
+      }
+
+      (0 until format.getChannels)
+        .map { i =>
+          channelInd = i
+          AudioConverter.readChannel(binary, i)
+        }
+        .map { bin =>
+          val arrayReader = Reader(bin)
+          val shortArray  = mutable.ArrayBuilder.make[Short]
+          while (arrayReader.remaining > 0) {
+            shortArray += arrayReader.readShortLE()
+          }
+          shortArray.result()
+        }
+        .map(vadProcessor.process)
+        .foreach {
+          fileNum = 0
+          seq =>
+            for ((chunkedShort, isVoice) <- seq; if isVoice) {
+              fileNum += 1
+              val writer = Writer.array(chunkedShort.length * 2)
+              for (s <- chunkedShort)
+                writer.writeShortLE(s)
+//              writer.toBinary
+
+              val suffix_1 = s"_$channelInd"
+              val suffix_2 = s"_$fileNum"
+              val parentPath = Option(out.getParent) match {
+                case Some(s) => s + File.separator
+                case None    => ""
+              }
+              val newFileName = parentPath + fileName + suffix_1 + suffix_2 + extension
+              val indexedOut  = new File(newFileName)
+              withCloseable(new FileOutputStream(indexedOut)) { os =>
+                Try(AudioConverter.writeWave(binary, os, 1)) match {
+                  case Failure(ex) =>
+                    println(s"Failed to save channel:$channelInd\n")
+                    throw ex
+                  case _ =>
+                }
+              }
+            }
+        }
+    }
+}
Index: tools/src/main/scala/ru/kryptonite/audio/tools/AudioConverterApp.scala
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/tools/src/main/scala/ru/kryptonite/audio/tools/AudioConverterApp.scala b/tools/src/main/scala/ru/kryptonite/audio/tools/AudioConverterApp.scala
--- a/tools/src/main/scala/ru/kryptonite/audio/tools/AudioConverterApp.scala	(revision e48ecbff4b0f6247ce4f11276c6b904f83b7738f)
+++ b/tools/src/main/scala/ru/kryptonite/audio/tools/AudioConverterApp.scala	(date 1697700008100)
@@ -1,7 +1,7 @@
 package ru.kryptonite.audio.tools
 
-import ru.kryptonite.audio.tools.processing.commands._
 import org.slf4j.LoggerFactory
+import ru.kryptonite.audio.tools.processing.commands._
 import ru.kryptonite.commons.util.CloseableOps
 import scopt.OptionParser
 
@@ -21,6 +21,9 @@
         case Convert =>
           val converter = Conversion(args.in, args.channel)
           converter.convertAndSave(args.out)
+        case Vad.Chunks =>
+          val vadChunks = VadChunking(args.in, args.out, args.mode, args.frameDurationMs)
+          vadChunks.chunks()
         case _ =>
       }
     } catch {
@@ -67,6 +70,8 @@
       .children(
         cmd("filter")
           .action((_, args) => args.copy(cmd = Vad.Filter)),
+        cmd("chunks")
+          .action((_, args) => args.copy(cmd = Vad.Chunks)),
         opt[Int]('m', name = "mode")
           .validate(x =>
             if (AcceptableModes.contains(x))
